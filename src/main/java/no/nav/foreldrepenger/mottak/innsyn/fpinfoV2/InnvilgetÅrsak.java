package no.nav.foreldrepenger.mottak.innsyn.fpinfoV2;

import java.util.Arrays;

enum InnvilgetÅrsak implements ResultatÅrsak {

    UTTAK_OPPFYLT("2001"),
    FELLESPERIODE_ELLER_FORELDREPENGER("2002"),
    KVOTE_ELLER_OVERFØRT_KVOTE("2003"),
    FORELDREPENGER_KUN_FAR_HAR_RETT("2004"),
    FORELDREPENGER_ALENEOMSORG("2005"),
    INNVILGET_FORELDREPENGER_FØR_FØDSEL("2006"),
    FORELDREPENGER_KUN_MOR_HAR_RETT("2007"),
    UTSETTELSE_GYLDIG_PGA_FERIE("2010"),
    UTSETTELSE_GYLDIG_PGA_100_PROSENT_ARBEID("2011"),
    UTSETTELSE_GYLDIG_PGA_INNLEGGELSE("2012"),
    UTSETTELSE_GYLDIG_PGA_BARN_INNLAGT("2013"),
    UTSETTELSE_GYLDIG_PGA_SYKDOM("2014"),
    UTSETTELSE_GYLDIG_PGA_FERIE_KUN_FAR_HAR_RETT("2015"),
    UTSETTELSE_GYLDIG_PGA_ARBEID_KUN_FAR_HAR_RETT("2016"),
    UTSETTELSE_GYLDIG_PGA_SYKDOM_KUN_FAR_HAR_RETT("2017"),
    UTSETTELSE_GYLDIG_PGA_INNLEGGELSE_KUN_FAR_HAR_RETT("2018"),
    UTSETTELSE_GYLDIG_PGA_BARN_INNLAGT_KUN_FAR_HAR_RETT("2019"),
    OVERFØRING_ANNEN_PART_HAR_IKKE_RETT_TIL_FORELDREPENGER("2020"),
    OVERFØRING_ANNEN_PART_SYKDOM_SKADE("2021"),
    OVERFØRING_ANNEN_PART_INNLAGT("2022"),
    OVERFØRING_SØKER_HAR_ALENEOMSORG_FOR_BARNET("2023"),
    UTSETTELSE_GYLDIG("2024"),
    UTSETTELSE_GYLDIG_SEKS_UKER_INNLEGGELSE("2025"),
    UTSETTELSE_GYLDIG_SEKS_UKER_FRI_BARN_INNLAGT("2026"),
    UTSETTELSE_GYLDIG_SEKS_UKER_FRI_SYKDOM("2027"),
    UTSETTELSE_GYLDIG_BFR_AKT_KRAV_OPPFYLT("2028"),
    GRADERING_FELLESPERIODE_ELLER_FORELDREPENGER("2030"),
    GRADERING_KVOTE_ELLER_OVERFØRT_KVOTE("2031"),
    GRADERING_ALENEOMSORG("2032"),
    GRADERING_FORELDREPENGER_KUN_FAR_HAR_RETT("2033"),
    GRADERING_FORELDREPENGER_KUN_MOR_HAR_RETT("2034"),
    FORELDREPENGER_KUN_FAR_HAR_RETT_MOR_UFØR("2036"),
    FORELDREPENGER_FELLESPERIODE_TIL_FAR("2037"),
    FORELDREPENGER_REDUSERT_GRAD_PGA_SAMTIDIG_UTTAK("2038"),
    ;

    private final String kode;

    InnvilgetÅrsak(String kode) {
        this.kode = kode;
    }

    static boolean contains(String periodeResultatÅrsak) {
        return Arrays.stream(values()).anyMatch(v -> periodeResultatÅrsak.equals(v.kode()));
    }

    static InnvilgetÅrsak fraKode(String kode) {
        return Arrays.stream(values()).filter(å -> å.kode.equals(kode)).findFirst().orElseThrow();
    }

    @Override
    public String kode() {
        return kode;
    }
}
